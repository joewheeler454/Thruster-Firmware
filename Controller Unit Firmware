#include <WiFi.h>
#include <esp_now.h>
#include <SPI.h>

// Configure Mac Address (Placeholder)
uint8_t THRUSTER_MAC_ADDR[] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}; 

// Pin Assignments
const int ENC_CS_PIN = 5;   // Chip Select for encoder
const int ENC_SCK_PIN = 18;  // SPI Clock 
const int ENC_MISO_PIN = 19; // SPI MISO

const int THRUST_SWITCH_PIN = 25;
const int LED_R_PIN = 26;
const int LED_G_PIN = 27;
const int LED_B_PIN = 14;

// Encoder & Angle Settings
const int ENCODER_RESOLUTION = 1024; 
const float GEAR_RATIO = 4.8; 
const float TARGET_DEGREES_PER_COUNT = (360.0 * GEAR_RATIO) / ENCODER_RESOLUTION; 

// Communication Settings
const unsigned long PING_INTERVAL_MS = 200;
const unsigned long CONNECTION_TIMEOUT_MS = 2000; 

// SPI Settings for Encoder
SPISettings encoderSPISettings(1000000, MSBFIRST, SPI_MODE0); 

// Global Variables
SPIClass spi = SPIClass(VSPI);

// Data structure to send
typedef struct struct_message_send {
    float target_angle_degrees; 
    bool thrust_enabled_request;
} struct_message_send;

// Data structure to receive
typedef struct struct_message_receive {
    bool thrust_active_feedback;
    bool low_battery_feedback;
} struct_message_receive;

struct_message_send controllerData;
struct_message_receive thrusterFeedback;

// State Variables
volatile bool thrustSwitchState = false;
volatile bool thrusterActiveFeedback = false;
volatile bool lowBatteryFeedback = false;
volatile bool peerConnected = false;
volatile unsigned long lastReceiveTime = 0;
unsigned long lastSendTime = 0;
int lastRawEncoderValue = -1; 

// LED States
enum LedState {
    OFF,
    GREEN,
    SOLID_RED,
    FLASHING_RED
};
LedState currentLedState = OFF;
unsigned long lastLedFlashTime = 0;
bool ledFlashOn = false;
const int LED_FLASH_INTERVAL_MS = 250; 

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
}

// Callback when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  if (len == sizeof(thrusterFeedback)) {
    memcpy(&thrusterFeedback, incomingData, sizeof(thrusterFeedback));
    
    noInterrupts();
    thrusterActiveFeedback = thrusterFeedback.thrust_active_feedback;
    lowBatteryFeedback = thrusterFeedback.low_battery_feedback;
    lastReceiveTime = millis();
    peerConnected = true; 
    interrupts();
  } else {
    Serial.println("Received data of incorrect size.");
  }
}

//LED Control
void setLedColor(int r, int g, int b) {
    digitalWrite(LED_R_PIN, r);
    digitalWrite(LED_G_PIN, g);
    digitalWrite(LED_B_PIN, b);
}

void updateLed() {
    LedState targetLedState = OFF;
    if (!peerConnected) {
        targetLedState = FLASHING_RED;
    } else if (lowBatteryFeedback) {
        targetLedState = SOLID_RED;
    } else if (thrusterActiveFeedback) {
        targetLedState = GREEN;
    } else {
        targetLedState = OFF;
    }

    if (targetLedState != currentLedState || targetLedState == FLASHING_RED) {
        currentLedState = targetLedState;
        
        switch (currentLedState) {
            case OFF:
                setLedColor(HIGH, HIGH, HIGH); 
                break;
            case GREEN:
                setLedColor(HIGH, LOW, HIGH); 
                break;
            case SOLID_RED:
                setLedColor(LOW, HIGH, HIGH);
                break;
            case FLASHING_RED:
        }
    }


    if (currentLedState == FLASHING_RED) {
        unsigned long now = millis();
        if (now - lastLedFlashTime > LED_FLASH_INTERVAL_MS) {
            lastLedFlashTime = now;
            ledFlashOn = !ledFlashOn;
            if (ledFlashOn) {
                setLedColor(LOW, HIGH, HIGH); 
            } else {
                setLedColor(HIGH, HIGH, HIGH); 
            }
        }
    }
}

int readSerialEncoder() {
    uint16_t rawData = 0;
    
    spi.beginTransaction(encoderSPISettings);
    digitalWrite(ENC_CS_PIN, LOW); 
    
    rawData = spi.transfer16(0xFFFF); 
    
    digitalWrite(ENC_CS_PIN, HIGH);
    spi.endTransaction();

    int position = rawData & 0x03FF; 

    return position;
}


void setup() {
    Serial.begin(115200);
    Serial.println("ESP32 Thruster Controller Starting (v2)...");

    
    pinMode(ENC_CS_PIN, OUTPUT);
    digitalWrite(ENC_CS_PIN, HIGH); 
   
    spi.begin(ENC_SCK_PIN, ENC_MISO_PIN, -1, ENC_CS_PIN);
    Serial.println("SPI Initialized for Encoder.");

    // Initialize Switch Pin
    pinMode(THRUST_SWITCH_PIN, INPUT_PULLUP);
    Serial.println("Switch Pin Initialized.");

    // Initialize LED Pins
    pinMode(LED_R_PIN, OUTPUT);
    pinMode(LED_G_PIN, OUTPUT);
    pinMode(LED_B_PIN, OUTPUT);
    setLedColor(HIGH, HIGH, HIGH); 
    Serial.println("LED Pins Initialized.");

    // Initialize WiFi and ESP-NOW
    WiFi.mode(WIFI_STA); 
    Serial.print("Controller MAC Address: ");
    Serial.println(WiFi.macAddress());

    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }
    Serial.println("ESP-NOW Initialized.");

    // Register callbacks
    esp_now_register_send_cb(OnDataSent);
    esp_now_register_recv_cb(OnDataRecv);

    esp_now_peer_info_t peerInfo;
    memset(&peerInfo, 0, sizeof(peerInfo));
    memcpy(peerInfo.peer_addr, THRUSTER_MAC_ADDR, 6);
    peerInfo.channel = 0;  
    peerInfo.encrypt = false;
    
    if (esp_now_add_peer(&peerInfo) != ESP_OK){
        Serial.println("Failed to add peer");
        return;
    }
    Serial.println("Thruster Peer Added.");

    lastReceiveTime = millis(); 
    
    
    int initialEncoderValue = readSerialEncoder();
    controllerData.target_angle_degrees = (float)initialEncoderValue * TARGET_DEGREES_PER_COUNT;
    lastRawEncoderValue = initialEncoderValue;
    Serial.print("Initial Encoder Reading: "); Serial.print(initialEncoderValue);
    Serial.print(", Initial Target Angle: "); Serial.println(controllerData.target_angle_degrees);
}

void loop() {
    unsigned long now = millis();
    bool sendUpdate = false;

    // Read Inputs
    int currentEncoderValue = readSerialEncoder();
    bool currentSwitchState = (digitalRead(THRUST_SWITCH_PIN) == LOW); 

    // Calculate Target Angle
    // Update only if encoder value has changed
    if (currentEncoderValue != lastRawEncoderValue) {
         controllerData.target_angle_degrees = (float)currentEncoderValue * TARGET_DEGREES_PER_COUNT;
         lastRawEncoderValue = currentEncoderValue;
         sendUpdate = true; 
    }
    
    // Update only if switch state has changed
    if (currentSwitchState != controllerData.thrust_enabled_request) {
        controllerData.thrust_enabled_request = currentSwitchState;
        sendUpdate = true; 
    }

    noInterrupts();
    unsigned long lastRx = lastReceiveTime;
    interrupts();

    if (now - lastRx > CONNECTION_TIMEOUT_MS) {
        if (peerConnected) {
            Serial.println("Peer disconnected.");
            peerConnected = false;
            thrusterActiveFeedback = false; 
            lowBatteryFeedback = false; 
        }
    } else {
        if (!peerConnected) {
             Serial.println("Peer connected.");
             peerConnected = true; 
        }
    }

    if (sendUpdate || (now - lastSendTime > PING_INTERVAL_MS)) {
        lastSendTime = now;
        esp_err_t result = esp_now_send(THRUSTER_MAC_ADDR, (uint8_t *) &controllerData, sizeof(controllerData));
    
    }

    updateLed();

    delay(5);
}

